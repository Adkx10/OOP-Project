package MotorPH;

import com.opencsv.CSVReader;
import com.opencsv.CSVWriter;
import com.opencsv.exceptions.CsvValidationException;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.List;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;

public class Remarks extends javax.swing.JFrame implements DataReader {

    private String[] colValue;
    private String[] rowValue;
    private final String empNo;
    private final String date;
    private final ViewRequest viewRequest;

    public Remarks(String empNo, String date, ViewRequest viewRequest) {
        initComponents();
        this.empNo = empNo;
        this.date = date;
        this.viewRequest = viewRequest;
    }

    @Override
    public boolean readData(String empNo, String... params) throws IOException, CsvValidationException {
        boolean empFound = false;
        try {
            String filename = "Leave Request.csv";
            // Read the CSV header
            try (CSVReader reader = new CSVReader(new FileReader(filename))) {
                String[] header = reader.readNext();

                // Read and add data rows
                while ((rowValue = reader.readNext()) != null) {
                    if (empNo == null || empNo.isEmpty()) {
                        empFound = true;
                    } else {
                        //If employee number is provided, only add matching rows are being added
                        if (rowValue.length > 0 && rowValue[0].equals(empNo) && rowValue[5].equals(date)) {
                            empFound = true;
                        }
                    }
                }
            }
        } catch (IOException e) {
            e.printStackTrace();
        }
        return empFound;
    }

    private void updateRequestRemarks(String empNo, String date, String newStatus, String newRemarks) throws FileNotFoundException, IOException, CsvValidationException {
        //Read the CSV file
        String filename = "Leave Request.csv";
        List<String[]> lines = new ArrayList<>();

        try (CSVReader reader = new CSVReader(new FileReader(filename))) {
            while ((colValue = reader.readNext()) != null) {
                if (colValue.length > 0 && colValue[0].equals(empNo) && colValue[5].equals(date)) {
                    colValue[6] = newStatus;
                    colValue[7] = newRemarks;
                }
                lines.add(colValue);
            }
        } catch (IOException | CsvValidationException ex) {
            Logger.getLogger(Remarks.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "An error occurred while reading the file.", "Error", JOptionPane.ERROR_MESSAGE);
            return; // Exit method if an error occurs
        }
        try (CSVWriter writer = new CSVWriter(new FileWriter(filename))) {
            writer.writeAll(lines);
            readData(empNo, date);
            JOptionPane.showMessageDialog(this, "Remarks updated successfully.", "Success", JOptionPane.INFORMATION_MESSAGE);
            this.dispose(); // Close the frame after successful update
        } catch (IOException ex) {
            Logger.getLogger(Remarks.class.getName()).log(Level.SEVERE, null, ex);
            JOptionPane.showMessageDialog(this, "An error occurred while writing to the file.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        remarksField = new javax.swing.JTextField();
        submit = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);

        remarksField.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));

        submit.setText("Submit");
        submit.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap(44, Short.MAX_VALUE)
                .addComponent(submit)
                .addContainerGap(44, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(remarksField)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(remarksField, javax.swing.GroupLayout.DEFAULT_SIZE, 38, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addComponent(submit)
                .addContainerGap())
        );

        remarksField.getAccessibleContext().setAccessibleDescription("Remarks");

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void submitActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitActionPerformed
        try {
            String newStatus = "Rejected";
            String newRemarks = remarksField.getText();
            updateRequestRemarks(empNo, date, newStatus, newRemarks);
            this.dispose();
        } catch (IOException | CsvValidationException ex) {
            Logger.getLogger(Remarks.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_submitActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField remarksField;
    private javax.swing.JButton submit;
    // End of variables declaration//GEN-END:variables
}
